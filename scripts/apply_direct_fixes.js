/**
 * Script pour appliquer directement les corrections √† la base de donn√©es Supabase
 * Cr√©√© le 01/06/2025
 */

import pg from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const { Pool } = pg;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration de la connexion √† la base de donn√©es Supabase
const pool = new Pool({
  host: 'db.sxrofrdhpzpjqkplgoij.supabase.co',
  port: 5432,
  database: 'postgres',
  user: 'postgres',
  password: 'Apollonf@vi92',
  ssl: {
    rejectUnauthorized: false
  }
});

// Fonction principale
async function main() {
  console.log('üîß Application des corrections √† la base de donn√©es Supabase...');
  
  try {
    // Lire le fichier SQL
    const sqlFilePath = path.join(__dirname, 'fix_messages_direct.sql');
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    
    console.log('üìã Ex√©cution du script SQL...');
    
    // Ex√©cuter le script SQL
    await pool.query(sqlContent);
    console.log('‚úÖ Script SQL ex√©cut√© avec succ√®s!');
    
    // V√©rifier les r√©sultats
    console.log('\nüîç V√©rification des r√©sultats...');
    
    // 1. V√©rifier la colonne read_at
    const readAtResult = await pool.query(`
      SELECT column_name, data_type
      FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'messages'
      AND column_name = 'read_at';
    `);
    
    if (readAtResult.rows.length > 0) {
      console.log('‚úÖ Colonne read_at ajout√©e avec succ√®s.');
    } else {
      console.error('‚ùå La colonne read_at n\'a pas √©t√© ajout√©e.');
    }
    
    // 2. V√©rifier les fonctions corrig√©es
    const functionsResult = await pool.query(`
      SELECT proname, prosrc
      FROM pg_proc
      JOIN pg_namespace ON pg_proc.pronamespace = pg_namespace.oid
      WHERE nspname = 'public'
      AND proname IN ('get_messages', 'send_message', 'mark_message_as_read', 'mark_messages_as_read', 'count_messages');
    `);
    
    const vulnerableFunctions = functionsResult.rows
      .filter(row => !row.prosrc.includes('SET search_path = public'))
      .map(row => row.proname);
    
    if (vulnerableFunctions.length === 0) {
      console.log('‚úÖ Toutes les fonctions ont √©t√© corrig√©es avec un chemin de recherche fixe.');
    } else {
      console.error(`‚ùå Fonctions encore vuln√©rables: ${vulnerableFunctions.join(', ')}`);
    }
    
    // 3. V√©rifier les politiques RLS
    const policiesResult = await pool.query(`
      SELECT tablename, policyname
      FROM pg_policies
      WHERE schemaname = 'public'
      AND tablename = 'messages';
    `);
    
    console.log(`‚úÖ ${policiesResult.rows.length} politiques RLS configur√©es pour la table messages:`);
    policiesResult.rows.forEach(row => {
      console.log(`   - ${row.policyname}`);
    });
    
    // 4. V√©rifier la fonction RPC get_user_conversations
    const rpcResult = await pool.query(`
      SELECT proname
      FROM pg_proc
      JOIN pg_namespace ON pg_proc.pronamespace = pg_namespace.oid
      WHERE nspname = 'public'
      AND proname = 'get_user_conversations';
    `);
    
    if (rpcResult.rows.length > 0) {
      console.log('‚úÖ Fonction RPC get_user_conversations cr√©√©e avec succ√®s.');
    } else {
      console.error('‚ùå La fonction RPC get_user_conversations n\'a pas √©t√© cr√©√©e.');
    }
    
    // 5. V√©rifier les colonnes de la table conversations
    const conversationsResult = await pool.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'conversations'
      AND column_name IN ('provider_id', 'client_id');
    `);
    
    if (conversationsResult.rows.length === 2) {
      console.log('‚úÖ La table conversations a les bonnes colonnes provider_id et client_id.');
    } else {
      console.error('‚ùå La table conversations n\'a pas les bonnes colonnes.');
      console.log('Colonnes trouv√©es:', conversationsResult.rows.map(row => row.column_name).join(', '));
    }
    
    // 6. V√©rifier les index
    const indexesResult = await pool.query(`
      SELECT indexname
      FROM pg_indexes
      WHERE schemaname = 'public'
      AND tablename = 'messages'
      AND indexname IN ('idx_messages_conversation_id', 'idx_messages_recipient_unread');
    `);
    
    console.log(`‚úÖ ${indexesResult.rows.length}/2 index cr√©√©s pour la table messages:`);
    indexesResult.rows.forEach(row => {
      console.log(`   - ${row.indexname}`);
    });
    
    // 7. V√©rifier les politiques RLS pour la table conversations
    const conversationPoliciesResult = await pool.query(`
      SELECT tablename, policyname
      FROM pg_policies
      WHERE schemaname = 'public'
      AND tablename = 'conversations';
    `);
    
    console.log(`‚úÖ ${conversationPoliciesResult.rows.length} politiques RLS configur√©es pour la table conversations:`);
    conversationPoliciesResult.rows.forEach(row => {
      console.log(`   - ${row.policyname}`);
    });
    
    console.log('\n‚úÖ Toutes les corrections ont √©t√© appliqu√©es et v√©rifi√©es avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application des corrections:', error);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await pool.end();
  }
}

// Ex√©cuter la fonction principale
main().catch(err => {
  console.error('Erreur non g√©r√©e:', err);
  process.exit(1);
});
